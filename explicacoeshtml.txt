HTML

Anatomia da TAG -
É uma linguagem de tags ( <> ). 

A tag pode ter corpo ou não, com corpo seria <tag> </tag>, ou seja, onde tiver fechamento. 

Comentário em html:
<!-- Comentário AQUI -->

Nem todas tags no html terão fechamento, como <meta>, <br> <input>

<input type="text" cod3r-cpf> ----> uma forma de personalizar atributos para facilitar a manipulação e a interação com elementos da página. colocamos nesse caso apenas a chave e não o valor, e ai podemos criar um codigo JS para ler as tags e ler esta tag para poder criar mascara de cpf, por exemplo. 

//////////////////

Anatomia de uma página HTML -
Antigamente, usava-se uma div e colocava-se como valores de nomes ids para dizer para que elas serviam, navegaçao (nav), header(cabeçalho), footer(rodapé), etc, hoje em dia tem-se tags especificas para tais coisas.
<article>
<aside>
<details>
etc...
https://www.w3schools.com/html/html5_semantic_elements.asp

No <Head> coloca-se coisas normalmente importadas, importar arquivo, etc, ai usa-se a tag "link", ou se quiser importar javascript usa-se <script src>...

No <body> 
colocamos as coisas padrão
<header></header>
<nav></nav>
<section id="conteudo"></section>
<footer></footer>

Meta charset é o tipo de codificação que vc quer usar no codigo
<meta charset="UTF-8">

A tag <aside> vc colocaria alguma barra lateral ou algumas propagandas, algo relacionado à lateral da página.

/////////////////

Um pouco de CSS -
Dentro do body coloquemos uma tag chamada "<span>" qeu tbm é uma tag visual.
<span id="textoPrincipal">Texto 1</span>
<span class="fundoVermelho negrito">Texto 2</span> <!-- aqui tenho 2 classes css, fundoVermelho e negrito -->
<span class="fundoVermelho">Texto 3</span>

Com span style="", dentro vc coloca o codigo CSS, o chave valor de CSS. praticamente todas as tags do html terá "id", q será o identificador da tag. O id deve ser unico na pagina inteira. No span de baixo, coloquei "class", que é outro identificador muito associado com uso de estilo para que voce possa aplicar uma determinada classe na sua pagina. e posso replicá-lo. 

uma classe CSS é criada com ponto e o nome da classe:
<style>
#textoPrincipal
{
    font-size: 40px;
    font-weight: bold;
    color: #fff;
    background-color: #444;
    padding: 10px;
}

.negrito
{
    font-weight: bold;
}

.fundoVermelho 
{
    background-color: red;
}

</style>

É a classe "fundoVermelho". quando coloco #, eu estou colocando estilo em um ID, no caso, id do primeiro span "textoPrincipal"; 

O class é mais voltado para o estilo. O identificador tbm serve pra aplicar estilo, mas ele é mais um identificador unico em uma página; 

Criando um atributo proprio exclusivo (wm-atrib):
<span class="fundoVermelho" wm-atrib>Texto 3</span>

Pra procurar no browser:
document.querySelector('[wm-atrib]')

Puxando um css externo:
<link rel="stylesheet" href="poucoDeCss.css">

Colocando um codigo css dentro do atributo/tag style: <span id="textoPrincipal" style="display: none;">Texto 1</span><br/><br/><br/>

/////////////////

Estruturando os exercícios -
npm i -g http-server =====> instalar http-ser

Em um arquivo index.html, criemos um HMTL:5.
Dentro do body:
<header> Exercicios HTML </header>
<nav>
    <a href="./codigos.html">00 - Teste</a>
</nav>
<section id="conteudo"></section>
<footer>
        Curso de Web
</footer>

agora no terminal digito: http-server -> ele vai startar na porta 8080. para definir uma porta para startar, usemos: http-server -p 9090 

----> Quero que quando clique no link href, ele faça uma requisiçao ajax, pegue esse conteudo e jogue dentro da div/section em que coloquei o conteudo. 
Façamos:

<script>
// A primeira coisa que temos que fazer é interceptar o click no link. no caso, document.querySelectorAll seleciona todas as tags. colocamos o nome da tag 'a'.
document.querySelectorAll('a').forEach(link => {
    link.onclick = function(e) { // 'e' é o evento que voce recebe do click.
        e.preventDefault(); // vai prevenir que o comportamento padrão do navegador ocorra. ou seja, vai imprimir 'ação' no console, não vai direcionar pro codigos.html
        console.log('ação!');
    }
})
</script>

Colocando 'fetch':

<script>
// A primeira coisa que temos que fazer é interceptar o click no link. no caso, document.querySelectorAll seleciona todas as tags. colocamos o nome da tag 'a'.

document.querySelectorAll('a').forEach(link => {
    link.onclick = function(e) { 
        e.preventDefault(); 
        const conteudo = document.getElementById('conteudo')
        fetch(link.href); // peguei um link, fiz um fetch
            .then(resp => resp.text()) // resp.text() serve para pegar o conteudo html da pagina que fiz requisiçao. depois dessa chamada é que tenho acesso ao valor textual do html que foi carregado nessa requisiçao.
            .then(html => conteudo.innerHTML = html)   
    }
})
</script>

// /\ oq eu to fazendo é: para cada um dos links eu faço uma funçao que será disparada no onclick, vai prevenir o comportamento padrão (Que é navegar), obtive o conteudo a partir do document.getElementById, faço um fetch (uma requisiçao ajax) em cima do atributo href que me dá o link da página, uma vez que a promise foi resolvida ele chama o then que me da uma resposta.text, chamando uma funçao q vai chamar outra promise e vou ter minha disposiçao o html, que substitui o conteudo.innerHTML por html q resolvi. ai vou ver os conteudos sendo alterados. 

É uma arquitetura boa e usual para colocar em páginas apenas aquilo que voce quer q mostre. 

- Usando atributo exclusivo:
No index.html, dentro do 'body'.:
<header> Exercicios HTML </header>
<nav>
    <a href wm-nav="codigos.html">00 - Teste</a>
</nav>
<section id="conteudo"></section>
<footer>
    Curso de Web
</footer>
<script>
    document.querySelectorAll('[wm-nav]').forEach(link => {
    link.onclick = function(e) { 
        e.preventDefault(); 
        const conteudo = document.getElementById('conteudo')
        fetch(link.getAttribute('wm-nav'))
            .then(resp => resp.text()) 
            .then(html => conteudo.innerHTML = html)   
    }
})
</script>

////////////////

Tag para textos #01 -

Para criar um estilo em cima de um id, coloquemos #NOMEDOID
<style>
    #conteudo {
        padding: 30px 0px;
    }
</style>

// Para habilitar o http-server desabilitando o cache:
http-server -c-1 . // o '.' no final significa que é diretorio atual, ou seja, o servidor ira servir os arquivos no diretorio atual onde a linha de comando foi executada.

Cabeçalhos:
<h1></h1> até <h6></h6>

- Parágrafos:
<p> 
    Lorem ipsum Teste 
    Lorem
</p>
// as quebras de linhas não serão interpretadas, pra ter quebras de linhas so usando tags. 

- Negrito e itálico:
<p> Negrito em <b>Negrito</b> e <i>itálico</i></p>

- Sobrescrito e subscrito 
<p> 2<sup>2</sup> e H<sub>2</sub>O </p> - sup vai pra cima, Sobrescrito e 'sub' vai pra baixo, subscrito.

- Espaço em branco 
<p> Espaço <span style="padding: 5px;"> </span> em branco </p>

////////////

Tag para textos #02 -
<-- Quebra de linha e quebra temática -->
<p> Isso está <br> em uma <br/> nova linha. </p>
<p> Tema interessante 1 </p>
<hr/>

Se você tem várias seçoes e quer colocar um HR, ele vai quebrar como se tivesse indo pra outra seção. 

<-- Marcações semânticas -->
Aqui é pq no caso, vc tá dando semantica a um determinado texto, e não estilo.
<p><strong>Cuidado!</strong> Alta voltagem! <em>Somente pessoas autorizadas</em<p>

/////////////

Listas - 
<h1> Listas </h1>

<!-- Lista Ordenada -->
<h2>Aprovados</h2>
<ol>
    <li>Bia</li>
    <li>Pedro</li>
    <li>João</li>
    <li>Ana</li>
</ol>

<!-- Lista não ordenada -->
<h2>Lista de compras</h2>
<ul>
    <li>Queijo</li>
    <li>Leite</li>
    <li>Arroz</li>
    <li>Feijão</li>
</ul>

<!-- Lista de definições -->

<dl>
    <dt> BaaS</dt>
    <dd>Backend como serviço </dd>
    <dt>IaaS</dt>
    <dd>Infraestrutura como serviço</dd>
    <dt>PaaS</dt>
    <dd>Plataforma como serviço</dd>
    <dt>SaaS</dt>
    <dd>Software como serviço</dd>
</dl>

é como um glossario, <Dt> é o termo que vc quer definir e a propria definição em si q seria o <dd>

/////////////////

Listas Aninhadas -
<!-- Lista aninhada -->
<h1> Projeto </h1>
<ul class="tree">
    <li>
        backend
        <ul>
            <li>
                app
                <ul>
                    <li>produto.js</li>
                    <li>usuario.js</li>
                    <li>venda.js</li>
                </ul>
            </li>
            <li>
                config
                <ul>
                    <li>banco.js</li>
                    <li>rotas.js</li>
                    <li>servidor.js</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        frontend
        <ul>
            <li>
                public
                <ul>
                    <li>app.css</li>
                    <li>app.js</li>
                    <li>index.html</li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<link rel="stylesheet" href="http://files.cod3r.com.br/curso-web/tree.css"> <!-- usamos esse estilo css para que possamos ter uma visualizaçao em css em formato arvore -->

///////////

Criando formato para clicar e expandir ou não -
<h1> Projeto </h1>
<link rel="stylesheet" href="http://files.cod3r.com.br/curso-web/tree.css">

<ul class="tree">
    <li>
        <span wm-folder>backend</span>
        <ul class="open">
            <li>
                <span wm-folder>app</span>
                <ul>
                    <li>produto.js</li>
                    <li>usuario.js</li>
                    <li>venda.js</li>
                </ul>
            </li>
            <li>
                <span wm-folder>config</span>
                <ul>
                    <li>banco.js</li>
                    <li>rotas.js</li>
                    <li>servidor.js</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <span wm-folder>frontend</span>
        <ul class="open">
            <li>
                <span wm-folder>public</span>
                <ul>
                    <li>app.css</li>
                    <li>app.js</li>
                    <li>index.html</li>
                </ul>
            </li>
        </ul>
    </li>
</ul>


<script>
    document.querySelectorAll('[wm-folder]').forEach(folder => { // vou selecionar todos os elementos que estão marcados com a propriedade 'wm-folder' e quando eu clicar em um deles vou disparar uma funçao que vai abrir ou fechar os elementos abaixo
        folder.onclick = function(e) {
            // para debugar, eu poderia colocar aqui: debugger;
            //console.log('teste');
            const ul = folder.nextElementSibling
            const d = ul.style.display
            ul.style.display = d === 'none' ? 'block' : 'none'
        }
    }) 
</script>

//////////////////////////

Links #01 -
<!-- URL Absoluta -->
<a href="http://www.google.com.br">Google 1</a><br/>
<a href="http://www.google.com.br" target="_blank">Google 1</a><br/> <!-- isso quer dizer que vai ser aberta em uma nova aba -->

<!-- URL Relativa -->
<a href="index.html">Voltar 1</a><br>
<a href="/index.html">Voltar 2</a><br/>
<a href="../index.html">Voltar 3</a><br/>

///////////////////

Links #02 - 
Passando e-mail direto:
<a href="mailto:email@empresa.com.br"></a>

<div id="noticia" style="position:absolute;top:2000px;">
    <h1>Noticia bomba!</h1>
    <p>Não era nada...</p>
    <a href="#inicio">Voltar Início</a>
</div>

<a href="#noticia">Ir para Notícia</a>

///////////////////

Tabelas -
Dentro da tabela temos cabeçalho, corpo e rodapé; como uma página.
<table border="1"> <!-- table border="1" ele teria uma borda. -->
    <caption>Produtos</caption>
    <thead> <!-- define a área que vc vai colocar o cabeçalho na sua tabela -->
        <tr> <!-- table row-->
            <th>Produtos</th> <!-- table head, se minha tabela tiver 4 colunas, para cada coluna eu vou ter um cabeçalho thead para cada uma delas e uma unica linha de cabeçalho -->
            <th>Preço</th>
            <th>Quantidade</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody> <!-- corpo da minha tabela que de fato vai ter os dados. os dados são organizados em linhas e colunas. 1 linha em uma tabela é um <TR> q é table row e <td> é a celula-->
        <tr>
            <td>iPad</td>
            <td>3289,00</td>
            <td>5</td>
            <td>16445,00</td>
        </tr>
        <tr>
            <td>Samsung S9</td>
            <td>2649,00</td>
            <td>8</td>
            <td>21192,00</td>
        </tr>
    </tbody>
    <tfoot> <!-- rodapé da minha página -->
        <tr>
            <td colspan="3"> <!-- colspan é uma propriedade que diz quantas colunas ele vai ocupar. rowspan é que ele vai ocupar 2 linhas., ai eu teria que ter outro <tr></tr> -->
                Total
            </td>
            <td>37637,00</td>
        </tr>
    </tfoot>
</table>

<!-- border-collapse: collapse; significa que não vai ter borda -->
<!-- Padding faz com que dentro do elemento crie espaçamento -->
<!-- thead tr é para aplicar estilos em <tr> que esteja dentro de <thead> -->
<!-- tbody tr:hover é para quando o clique do mouse passar em cima do <tr> que estiver dentro do <tbody> vai aplicar o estilo css -->

<style>
    table {
        border-collapse: collapse; 
    }

    th, td {
        padding: 10px;
    }

    thead tr {
        border-bottom: solid 3px #444;
    }

    tbody tr:hover {
        background-color: #dedede;
    }

    tfoot  {
        background-color: #444;
        color: #fff;
        font-weight: bold;
    }

</style>

///////////////////////

Formulários #01 - 
Agora veremos os tipos radio, box, etc, input etc. 

Já vamos criar o nosso arquivo, no terminal do vs code: npm init -y para criar o arquivo 'package.json'
depois damos npm i --save express@4.16.3 body-parser@1.18.2 -E, com isso, dentro da pasta 'form', agora tenho o package.json com 2 dependencias dentro dela, o express e o body-parser.  e cria a pasta 'node_modules' com as dependencias instaladas.

Dentro de 'form.html':

<H1> Formulário </H1>
<form action="http://localhost:3003/usuarios" method="POST">
    <input type="text" name="nome">
    <button>Incluir</button>
</form>

Agora, vamos no meu back-end 'server.js' p configurar e receber a requisiçao no tipo post:

Server.js:

const express = require('express');
const app = express();
const bodyParser = require('body-parser'); // o body-parser vai fazer um parser no corpo da requisiçao/request, pegar esses dados e jogar dentro do request.body, ent qd acessar request.body vou ter acesso a todos os dados que submeti

app.use(bodyParser.urlencoded({extended: true})) // se nao tiver, nao vai fazer um parse no body, não le o corpo da requisiçao e nao transforma os dados para serem interpretados

// agora vou ter que atender às URLs
app.post('/usuarios', (req, resp) => { // fazer requisiçao 'post' em cima da url '/usuarios', ja que la no formulario to acessando /usuarios. 'req' e 'resp' é uma funçao middleware que é requisiçao e resposta [no caso não usaremos next()]
    console.log(req.body) // request.body para saber o que de fato chegou no corpo da requisição, imprimindo no servidor.
    resp.send('<h1>Parabéns</h1>') // mandando como resposta a string 'parabens, vai renderizar no browser
})

app.listen(3003); // a porta que coloquei para ouvir no formulario

No terminal dou 'cd form', depois dou 'node server.js'

/////////////

Formulario #02 -
No form.html:
<H1> Formulário </H1>
<form action="http://localhost:3003/usuarios" method="POST">
    <input type="text" name="nome">
    <input type="password" name="senha">
    <textarea name="bio" cols="30" rows="10"></textarea>
    <div>
        <!-- tenho q colocar 'value' para que de fato quando clicar oq for enviado pro backend é oq ta dentro de value. -->
        <input type="radio" name="tipo" value="admin"> Admin
        <input type="radio" name="tipo" value="regular"> Regular
        <input type="radio" name="tipo" value="professor"> Professor
    </div>
    <div>
        <input type="checkbox" name="ativo"> Ativo
    </div>

    <select name="estado">
        <option value=""></option>
        <option value="ac">Acre</option>
        <option value="ba">Bahia</option>
        <option value="ce">Ceará</option>
    </select>

    <select name="interesses" multiple size="5">
        <option value="js">JavaScript</option>
        <option value="java">JAVA</option>
        <option value="php">PHP</option>
        <option value="python">Python</option>
        <option value="go">Go</option>
        <option value="c">C</option>
    </select>

    <button>Incluir</button>
</form>

<!-- margin-bottom para dar espaçamento dos campos -->
<!-- fiz input[type=radio] display inline para que não fique um embaixo do outro bem feio. -->
<style>
    input, 
    textarea,
    select {
        display: block;
        margin-bottom: 10px; 
    }

    input[type=radio],
    input[type=checkbox] {
        display: inline;
    }
</style>

No Server.js:
const express = require('express');
const app = express();
const bodyParser = require('body-parser'); // o body-parser vai fazer um parser no corpo da requisiçao/request, pegar esses dados e jogar dentro do request.body, ent qd acessar request.body vou ter acesso a todos os dados que submeti

app.use(bodyParser.urlencoded({extended: true})) // se nao tiver, nao vai fazer um parse no body, não le o corpo da requisiçao e nao transforma os dados para serem interpretados

// agora vou ter que atender às URLs
app.post('/usuarios', (req, resp) => { // fazer requisiçao 'post' em cima da url '/usuarios', ja que la no formulario to acessando /usuarios. 'req' e 'resp' é uma funçao middleware que é requisiçao e resposta [no caso não usaremos next()]
    console.log(req.body) // request.body para saber o que de fato chegou no corpo da requisição, imprimindo no servidor.
    resp.send('<h1>Parabéns</h1>') // mandando como resposta a string 'parabens, vai renderizar no browser
})

app.listen(3003); // a porta que coloquei para ouvir no formulario

-> Um terminal com http-server ligado e o outro digitado 'node server.js'

/////////////////////

Formulario #03

Alteramos o button para "button formaction="http://localhost:3003/usuarios/3".

No servidor, vemos o "app.post('/usuarios')"..., criaremos outro so q agora apontando para usuarios/:id para alterar de fato, q é o que queremos, colocamos ':id' e não '3', pois 'id' é um parametro. 

Instalo nodemon dependencia de dev: npm i --save-dev nodemon
depois, vamos startar: 
nodemon server.js

No form.html:
<H1> Formulário </H1>
<form method="POST">
    
    <input type="hidden" name="id" value="3">
    <input type="text" name="nome">
    <input type="password" name="senha">
    <textarea name="bio" cols="30" rows="10"></textarea>
    <div>
        <!-- tenho q colocar 'value' para que de fato quando clicar oq for enviado pro backend é oq ta dentro de value. -->
        <input type="radio" name="tipo" value="admin"> Admin
        <input type="radio" name="tipo" value="regular"> Regular
        <input type="radio" name="tipo" value="professor"> Professor
    </div>

    <div>
        <input type="checkbox" name="ativo"> Ativo
    </div>

    <select name="estado">
        <option value=""></option>
        <option value="ac">Acre</option>
        <option value="ba">Bahia</option>
        <option value="ce">Ceará</option>
    </select>

    <select name="interesses" multiple size="5">
        <option value="js">JavaScript</option>
        <option value="java">JAVA</option>
        <option value="php">PHP</option>
        <option value="python">Python</option>
        <option value="go">Go</option>
        <option value="c">C</option>
    </select>

    <button formaction="http://localhost:3003/usuarios">Incluir</button>
    <button formaction="http://localhost:3003/usuarios/3">Alterar</button>    
</form>

<!-- margin-bottom para dar espaçamento dos campos -->
<!-- fiz input[type=radio] display inline para que não fique um embaixo do outro bem feio. -->
<style>
    input, 
    textarea,
    select {
        display: block;
        margin-bottom: 10px; 
    }

    input[type=radio],
    input[type=checkbox] {
        display: inline;
    }
</style>

No server.js:
const express = require('express');
const app = express();
const bodyParser = require('body-parser'); // o body-parser vai fazer um parser no corpo da requisiçao/request, pegar esses dados e jogar dentro do request.body, ent qd acessar request.body vou ter acesso a todos os dados que submeti

app.use(bodyParser.urlencoded({extended: true})) // se nao tiver, nao vai fazer um parse no body, não le o corpo da requisiçao e nao transforma os dados para serem interpretados

// agora vou ter que atender às URLs
app.post('/usuarios', (req, resp) => { // fazer requisiçao 'post' em cima da url '/usuarios', ja que la no formulario to acessando /usuarios. 'req' e 'resp' é uma funçao middleware que é requisiçao e resposta [no caso não usaremos next()]
    console.log(req.body) // request.body para saber o que de fato chegou no corpo da requisição, imprimindo no servidor.
    console.log(req.query); // aqui são as querys que foram de fato usadas no formulário
    resp.send('<h1>Parabéns. Usuário Incluído.</h1>') // mandando como resposta a string 'parabens, vai renderizar no browser
})

app.post('/usuarios/:id', (req, resp) => {
    console.log(req.params.id); // quero que mostre o id do parametro tbm
    console.log(req.body) 
    resp.send('<h1>Parabéns. Usuário alterado. </h1>')
})

app.listen(3003); // a porta que coloquei para ouvir no formulario

Se fosse "app.get" seria metodo get e ai os parametros seriam passados via URL.

///////////////////

Imagens -

<!-- tem-se a propriedade "alt" de alternativa, do img, que é exibida em uns momentos principalmente qd nao é exibida; width representa largura e height altura. -->
<p>
    <img src="http://files.cod3r.com.br/curso-web/imagem1.jpg" alt="Muro da Cidade" width="513" height="342" title="Muro da cidade por Tarso Bessa">
</p>

<p>
    <img src="http://files.cod3r.com.br/curso-web/imagem2.gif" alt="Intro Cod3r" height="342">
</p>

<p class="circular">
    <img src="http://files.cod3r.com.br/curso-web/imagem3.png" alt="Rio de Janeiro" height="342">
</p>

<p class="texto">
    <img src="http://files.cod3r.com.br/curso-web/avatar.jpg" alt="Avatar" height="50" align="left">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
</p>

<p class="cidade">
    <p>
        <!-- nessa tag vc tem a possibilidade de colocar várias fontes/imagens e em cima dessas imgs vc pode colocar criterios para que ela seja exibida ou não -->
        <picture>
            <!-- a imagem sera exibida se o minimo de largura for de 600px -->
            <source srcset="http://files.cod3r.com.br/curso-web/logo-larga.png" media="(min-width: 600px)">
            <!-- caso não tenha minimo de largura de 600px, vai para o outro img src, exibirá a imagem de baixo. se a imagem não existir, ele não irá para o proximo, dá erro apenas  -->
            <img src="http://files.cod3r.com.br/curso-web/logo-estreita.png" alt="logo">
        </picture>
    </p>
</p>

<style>
    .circular {
        width: 513px;
        background-color: #444;
    }

    .texto {
        width: 400px;
    }

    .texto img {
        margin-right: 10px;
    }

    .cidade {
        width: 513px;
        height: 342px;
        background-image: url('http://files.cod3r.com.br/curso-web/imagem4.jpg');
        background-position: center;
        background-repeat: no-repeat;
        background-size: 200%;
    }
</style>

//////////////

Desafio Slider #01 - 
Dentro de imagens.html:
<div wm-slider>
    <p>
        <img src="http://files.cod3r.com.br/curso-web/imagem1.jpg" alt="Muro da Cidade" width="513" height="342" title="Muro da cidade por Tarso Bessa">
    </p>

    <p>
        <img src="http://files.cod3r.com.br/curso-web/imagem2.gif" alt="Intro Cod3r" height="342">
    </p>

    <p class="circular">
        <img src="http://files.cod3r.com.br/curso-web/imagem3.png" alt="Rio de Janeiro" height="342">
    </p>

    <p class="texto">
        <img src="http://files.cod3r.com.br/curso-web/avatar.jpg" alt="Avatar" height="50" align="left">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
    </p>

    <p class="cidade"></p>

    <p>
        <!-- nessa tag vc tem a possibilidade de colocar várias fontes/imagens e em cima dessas imgs vc pode colocar criterios para que ela seja exibida ou não -->
        <picture>
            <!-- a imagem sera exibida se o minimo de largura for de 600px -->
            <source srcset="http://files.cod3r.com.br/curso-web/logo-larga.png" media="(min-width: 600px)">
            <!-- caso não tenha minimo de largura de 600px, vai para o outro img src, exibirá a imagem de baixo. se a imagem não existir, ele não irá para o proximo, dá erro apenas  -->
            <img src="http://files.cod3r.com.br/curso-web/logo-estreita.png" alt="logo">
        </picture>
    </p>
</div>

<style>

    p {
        position: absolute;
        display: none;
    }

    .circular {
        width: 513px;
        background-color: #444;
    }

    .texto {
        width: 400px;
    }

    .texto img {
        margin-right: 10px;
    }

    .cidade {
        width: 513px;
        height: 342px;
        background-image: url('http://files.cod3r.com.br/curso-web/imagem4.jpg');
        background-position: center;
        background-repeat: no-repeat;
        background-size: 200%;
    }
</style>

<script>
    function mover(elem, inicio, fim, passo, callback) { // recebe o elemento, a posiçao de inicio, a posiçao de fim, o passo que é tipo de qt em qts passos vou mover.  funçao callback para que quando ele terminar de mover um determinado elemento, vai chamar o callback. 
        const novoInicio = inicio - passo;
        if(novoInicio >= fim) {
            elem.style.left = novoInicio + 'px'; // px é a unidade que vou definir
            setTimeout(() => mover(elem, novoInicio, fim, passo, callback), 7); // to chamando a funçao settimeout passando a funçao anonima como parametro e será executada de 7 em 7 milisegundos
        }
        else
        {
            callback()
        }
    }

    /* // Aqui roda slide somente no primeiro p da div wm-slider, isto é, somente a primeira imagem
    const p = document.querySelector('[wm-slider] > p') // aqui nao to pegando todas, to pegando somente a primeira tag '<p>' que tenha a propriedade wm-slider
    p.style.display = 'block'; // fazer com que a tag <p> fique visivel.
    mover(p, 1500, -520, 5, () => { // mover a tag p de 1500 para -520 (sumir da tela ja que ela é de largura 513px) e o passo seja de 5 em 5 pixels
        console.log('Terminou!!!');
    })*/

    function slider() {
        const elementos = document.querySelectorAll('[wm-slider] > p'); // Seleciona todas as imagens dentro dos elementos <p> dentro de [wm-slider]
        const slides = Array.from(elementos) // Obtém os elementos <p> que contêm as imagens
        exibirSlide(slides, slides[0]);
    }

    function exibirSlide(slides, slide) {
        slide.style.display = 'block' /* Quando o JavaScript define style.display = 'block', está alterando a propriedade CSS display do elemento selecionado para block. Aqui está uma explicação mais detalhada:
        style: É uma propriedade que dá acesso às propriedades de estilo de um elemento HTML via JavaScript. Ao acessar style, você pode modificar diretamente os estilos do elemento.
        display: É uma propriedade CSS que determina como um elemento é renderizado na página. block é um dos valores possíveis para essa propriedade. Quando um elemento é exibido como block, ele é renderizado como um bloco retangular que ocupa toda a largura disponível na linha em que está.
        'block': É o valor atribuído à propriedade display. Quando definido como 'block', o elemento torna-se um bloco retangular que começa em uma nova linha.
        Então, ao definir style.display = 'block' para um elemento, estamos basicamente instruindo o navegador a mostrar esse elemento como um bloco retangular. Isso é comumente usado para tornar visíveis elementos que podem estar ocultos, já que definir display como 'block' geralmente faz com que o elemento seja exibido na página, assumindo o espaço apropriado conforme seu contexto de layout. */

        // Definir agora o inicio e o fim desse movimento: o inicio é o tamanho da tela atual
        // com innerWidth vai me dar a largura da pagina de inicio, e a largura da area 'p' com clientWidth.
        const inicio = innerWidth
        const fim = -slide.clientWidth

        slide.style.left = `${inicio}px`

        mover(slide, inicio, fim, 5, () => {
            slide.style.display = 'none'
            exibirSlide(slides, getProximo(slides, slide));
        })

    }

    function getProximo(lista, atual) {
        const i = lista.indexOf(atual) + 1;
        return i < lista.length ? lista[i] : lista[0]
    }

    slider();

</script>

///////////////////////

Vídeo - 
Usando a tag 'src' vc consegue ter vários tipos de fontes diferentes.

Em video.html:

<!-- propriedade 'controls' percebe q os controles do vídeo vão aparecer, diminuir som, play pause etc -->]
<!-- qd entra na tela, o video ja inicia automaticamente -->
<!-- controlList e passo as opções, se for 'nodownload', o download vai sumir -->
<video id="meuVideo" width="800" height="450" controls autoplay controlList="nodownload">
    <source src="http://files.cod3r.com.br/curso-web/video.mp4" type="video/mp4">
    Seu browser não suporta a tag de vídeo.
</video>

<!-- essa div de fora vai ser responsável por renderizar o progresso como um todo, e a div de dentro responsavel por preencher com cor a barra de progresso -->
<div wm-progresso="meuVideo" class="progresso"> <!-- coloquei wm-progresso -->
    <div>

    </div>
</div>

<div>
    <button wm-play="meuVideo">
        Play
    </button>
    <button wm-pause="meuVideo">
        Pause
    </button>
</div>


<!-- '.progresso > div' é: selecionar elementos <div> que são filhos diretos de um elemento com a classe .progresso -->
<style>
    .progresso {
        height: 20px;
        width: 500px;
        border: solid 1px #444;
        margin: 20px;
    }
    
    .progresso > div {
        background-color: red;
        color: #fff;
        height: 100%;
        text-align: right;
        font-size: 14px;
        width: 30%;
    }
</style>

<script>
    function configurarVideo(id) {
        const video = document.getElementById(id);
        video.oncontextmenu = () => false

        document.querySelector(`[wm-play=${id}]`).onclick = e => video.play();
        document.querySelector(`[wm-pause=${id}]`).onclick = e => video.pause();
        
        setInterval(() => {
            const percentual= (video.currentTime / video.duration) * 100;
            const valorDiv = document.querySelector(`[wm-progresso=${id}] > div`)
            valorDiv.style.width = `${percentual}%`
            valorDiv.innerHTML = `${percentual.toFixed(1)}%`
        }, 500)
        
    }
    configurarVideo('meuVideo');
</script> 



//////////////////

Tags não visuais-

Tags <div> e <spans> são mt utilizadas, div mt usada pra colocar divisões, áreas, pra colocar um agrupamento de elementos dentro de uma tag, etc, e depois colocar estilo ou fazer oq quiser. 

O span é mais contexto inline, se vc quiser marcar determinado trecho pra dar destaque, ou outra coisa, etc. 
Uma div é um display block, vai ocupar mais de uma linha, se colocar mais de uma div vai ocupar mais linhas.

Arquivo tags.html:

<!-- Tags semânticas:
section - agrupamento temático de conteúdo
article - conteúdo auto-contido
header - cabeçalho do documento
footer - rodapé do documento
nav - agrupa os links de navegação
aside - de lado (ex.: sidebar); Relacionado com conteudo em volta (Adendo)
details exibe detalhes que podem ser exibidos ou escondidos

div - divisão ou seção; por padrão tem display:Block, isto é, ocupa somente uma linha, fica em uma linha
span - usado para agrupar elementos inline

-->

<div>Área 1</div>
<div>Área 2</div>

<p>
    Este é um texto com <span class="diferente">muitas palavras</span> e ponto. 
</p>

<!-- ja que tenho span, e posso colocar classe para aplicar estilo, posso agora criar um estilo -->

<!-- p,div como display inline vai manter tudo numa linha so, o p e o div. -->
<!-- span como display block vai quebrar eles em linhas diferentes -->
<style>
    p, div { 
        display: inline;
    }

    span {
        display: block;
    }

    .diferente {
        font-weight: bold;
        font-size: 30px;
        color: chocolate;
    }
</style>